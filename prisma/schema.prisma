generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                  String      @id @default(cuid())
  email               String      @unique
  nome                String
  senha               String
  tipoUsuario         TipoUsuario
  ativo               Boolean     @default(true)
  criadoEm            DateTime    @default(now())
  atualizadoEm        DateTime    @updatedAt
  supervisorId        String?
  avaliacoesRecebidas Avaliacao[] @relation("AvaliacaoAvaliado")
  avaliacoesFeitas    Avaliacao[] @relation("AvaliacaoAvaliador")
  feedbacksRecebidos  Feedback[]  @relation("FeedbackReceptor")
  feedbacksEnviados   Feedback[]  @relation("FeedbackRemetente")
  auditLogs           AuditLog[]
  changelogs          Changelog[]
  supervisor          Usuario?    @relation("SupervisorAtendente", fields: [supervisorId], references: [id])
  supervisoes         Usuario[]   @relation("SupervisorAtendente")

  @@map("usuarios")
}

model Avaliacao {
  id           String   @id @default(cuid())
  nota         Int
  comentario   String?
  periodo      String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  avaliadoId   String
  avaliadorId  String
  avaliado     Usuario  @relation("AvaliacaoAvaliado", fields: [avaliadoId], references: [id])
  avaliador    Usuario  @relation("AvaliacaoAvaliador", fields: [avaliadorId], references: [id])

  @@unique([avaliadoId, avaliadorId, periodo])
  @@map("avaliacoes")
}

model Feedback {
  id           String         @id @default(cuid())
  titulo       String
  conteudo     String
  tipo         TipoFeedback
  prioridade   Prioridade     @default(MEDIA)
  status       StatusFeedback @default(PENDENTE)
  criadoEm     DateTime       @default(now())
  atualizadoEm DateTime       @updatedAt
  receptorId   String
  remetenteId  String
  receptor     Usuario        @relation("FeedbackReceptor", fields: [receptorId], references: [id])
  remetente    Usuario        @relation("FeedbackRemetente", fields: [remetenteId], references: [id])

  @@map("feedbacks")
}

enum TipoUsuario {
  ADMIN
  SUPERVISOR
  ATENDENTE

  @@map("tipo_usuario")
}

enum TipoFeedback {
  ELOGIO
  SUGESTAO
  RECLAMACAO
  MELHORIA

  @@map("tipo_feedback")
}

enum Prioridade {
  BAIXA
  MEDIA
  ALTA
  URGENTE

  @@map("prioridade")
}

enum StatusFeedback {
  PENDENTE
  EM_ANALISE
  RESOLVIDO
  REJEITADO

  @@map("status_feedback")
}

model AuditLog {
  id              String    @id @default(cuid())
  usuarioId       String?
  acao            String
  nomeTabela      String?
  registroId      String?
  dadosAnteriores Json?
  dadosNovos      Json?
  enderecoIp      String?
  userAgent       String?
  criadoEm        DateTime  @default(now())
  usuario         Usuario?  @relation(fields: [usuarioId], references: [id])

  @@map("audit_logs")
}

model Changelog {
  id          String          @id @default(cuid())
  versao      String          @unique
  dataLancamento DateTime
  tipo        TipoMudanca
  titulo      String
  descricao   String
  categoria   CategoriaChangelog?
  prioridade  PrioridadeChangelog @default(MEDIA)
  publicado   Boolean         @default(false)
  criadoEm    DateTime        @default(now())
  atualizadoEm DateTime       @updatedAt
  autorId     String?
  autor       Usuario?        @relation(fields: [autorId], references: [id])
  itens       ChangelogItem[]

  @@map("changelog")
}

model ChangelogItem {
  id          String    @id @default(cuid())
  changelogId String
  tipo        TipoMudanca
  titulo      String
  descricao   String
  ordem       Int       @default(0)
  criadoEm    DateTime  @default(now())
  changelog   Changelog @relation(fields: [changelogId], references: [id], onDelete: Cascade)

  @@map("changelog_itens")
}

enum TipoMudanca {
  ADICIONADO
  ALTERADO
  CORRIGIDO
  REMOVIDO
  DEPRECIADO
  SEGURANCA

  @@map("tipo_mudanca")
}

enum CategoriaChangelog {
  FUNCIONALIDADE
  INTERFACE
  PERFORMANCE
  SEGURANCA
  CONFIGURACAO
  DOCUMENTACAO
  TECNICO

  @@map("categoria_changelog")
}

enum PrioridadeChangelog {
  BAIXA
  MEDIA
  ALTA
  CRITICA

  @@map("prioridade_changelog")
}

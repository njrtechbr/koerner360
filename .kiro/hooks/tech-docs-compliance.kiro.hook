{
  "enabled": true,
  "name": "Tech Documentation Compliance",
  "description": "Monitors code changes to ensure they follow official documentation standards for Next.js 15, Prisma ORM, Tailwind CSS 4, shadcn/ui, Auth.js v5, ESLint, TypeScript, and PostgreSQL",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.ts",
      "src/**/*.tsx",
      "src/**/*.js",
      "src/**/*.jsx",
      "prisma/schema.prisma",
      "tailwind.config.js",
      "next.config.ts",
      "auth.ts",
      "middleware.ts",
      "eslint.config.mjs",
      ".eslintrc.json",
      "tsconfig.json",
      "components.json"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Review the changed files and ensure they follow the official documentation standards and best practices for:\n\n- Next.js 15 (App Router, Server Components, Route Handlers, Data Fetching, Performance)\n- Prisma ORM (Type Safety, Query Optimization, Migrations, Best Practices)\n- Tailwind CSS 4 (Utility Classes, Configuration, Responsive Design, Performance)\n- shadcn/ui (Components, Theming, Customization)\n- Auth.js v5 (Authentication, Session Management, Security)\n- ESLint (Rules, Configuration, TypeScript integration)\n- TypeScript (Strict typing, Best practices)\n- PostgreSQL (Performance, Best practices)\n\nCheck for:\n1. Proper use of App Router patterns and Server Components\n2. Type-safe Prisma queries and optimal database patterns\n3. Correct Tailwind utility usage and responsive design\n4. Proper shadcn/ui component implementation\n5. Secure Auth.js v5 patterns and session handling\n6. ESLint rule compliance and code quality\n7. TypeScript strict typing and proper type definitions\n8. PostgreSQL performance considerations\n\nProvide specific recommendations based on the official documentation links provided in the tech stack guidelines."
  }
}